cmake_minimum_required(VERSION 3.15)

project(xcl C CXX)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_C_STANDARD 11)

set(CMAKE_C_FLAGS "-Wall -std=c11")
set(CMAKE_CXX_FLAGS "-Wall -std=c++11")

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    message(STATUS "Debug")
    set(CMAKE_C_FLAGS "-g ${CMAKE_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "-g ${CMAKE_CXX_FLAGS}")
elseif (CMAKE_BUILD_TYPE STREQUAL "Release")
    message(STATUS "Release")
    set(CMAKE_C_FLAGS "-O2 ${CMAKE_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "-O2 ${CMAKE_CXX_FLAGS}")
endif ()

if (${CMAKE_C_COMPILER_ID} STREQUAL "GNU" OR ${CMAKE_C_COMPILER_ID} STREQUAL "Clang")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=hidden")
endif ()
if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
endif ()

message(STATUS "C FLAGS:${CMAKE_C_FLAGS}")
message(STATUS "CXX FLAGS:${CMAKE_CXX_FLAGS}")

set(xcl_inc_dir include internal/inc)
include_directories(${xcl_inc_dir})

set(lib_src_files)

function(filter_files)
    if (WIN32)
        list(APPEND excludes unix linux ubuntu centos mac macos macosx)
    elseif (APPLE)
        list(APPEND excludes win32 win64 windows win linux ubuntu centos)
    elseif (UNIX)
        list(APPEND excludes win32 win64 windows win macos mac macosx)
    endif ()
    file(GLOB_RECURSE all_src_files src/*.c src/*.cc src/*.cpp src/*.cxx
            internal/src/*.c internal/src/*.cc internal/src/*.cpp internal/src/*.cxx)
    foreach (file_path ${all_src_files})
        set(accept true)
        foreach (exclude ${excludes})
            string(FIND ${file_path} ${exclude} index)
            if (NOT ${index} EQUAL -1)
                set(accept false)
                break()
            endif ()
        endforeach ()
        if (${accept})
            list(APPEND files ${file_path})
        endif ()
    endforeach ()
    set(lib_src_files ${files} PARENT_SCOPE)
endfunction()

filter_files()

if (compile_static_lib)
    message(STATUS "static")
    add_definitions(-DSTATIC)
    add_library(${xcl_lib_name} STATIC ${lib_src_files})
else ()
    message(STATUS "dynamic")
    add_definitions(-DDYNAMIC)
    add_library(${xcl_lib_name} SHARED ${lib_src_files})
endif ()

if (WIN32)
    message(STATUS "win32")
    add_compile_definitions(_WIN32_WINNT=0x0A00)
    target_link_libraries(${xcl_lib_name} winmm)
else ()
    if (APPLE)
        message(STATUS "macos")
    elseif (UNIX)
        message(STATUS "unix")
    endif ()
endif ()

if (copy_xcl_dynamic_lib)
    message(STATUS "enable copy dynamic library to executable path")
    if (NOT compile_static_lib)
        add_custom_command(TARGET ${xcl_lib_name} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${xcl_lib_name}> ${EXECUTABLE_OUTPUT_PATH}
                COMMAND ${CMAKE_COMMAND} -E echo "copy $<TARGET_FILE:${xcl_lib_name}> to ${EXECUTABLE_OUTPUT_PATH}"
                VERBATIM)
    endif ()
endif ()
