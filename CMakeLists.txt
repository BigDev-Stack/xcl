cmake_minimum_required(VERSION 3.15)

project(xcl C CXX)

function(check_c_cxx_compiler)
    function(_check_compiler compiler)
        message(STATUS ${compiler})
        set(valid_compiler false)
        if ("${compiler}" STREQUAL "MSVC")
            set(valid_compiler true)
        elseif ("${compiler}" STREQUAL "Clang")
            set(valid_compiler true)
        elseif ("${compiler}" STREQUAL "GNU")
            set(valid_compiler true)
        endif ()
        if (NOT ${valid_compiler})
            message(FATAL_ERROR "invalid compiler")
        endif ()
    endfunction()
    _check_compiler(${CMAKE_CXX_COMPILER_ID})
    _check_compiler(${CMAKE_C_COMPILER_ID})
endfunction()

check_c_cxx_compiler()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_C_STANDARD 11)

set(CMAKE_DEBUG_POSTFIX "d")
set(xcl_lib_name xcl)

set(CMAKE_SHARED_LIBRARY_PREFIX lib)
#set(CMAKE_SHARED_LIBRARY_SUFFIX "")
set(CMAKE_STATIC_LIBRARY_PREFIX lib)
#set(CMAKE_STATIC_LIBRARY_SUFFIX  "")

if (NOT DEFINED CMAKE_BUILD_TYPE)
    message(WARNING "cmake build type is not specified, auto set to Debug")
    set(CMAKE_BUILD_TYPE "Debug")
endif ()

set(compile_static_lib false)

if (${compile_static_lib})
    set(xcl_lib_type "static")
else ()
    set(xcl_lib_type "dynamic")
endif ()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(wall "/Wall")
    set(debug "/Od /Zi")
    set(o1 "/O1")
    set(o2 "/O2")
    set(hidden)
else ()
    set(wall "-Wall")
    set(debug "-g")
    set(o1 "-O1")
    set(o2 "-O2")
    set(hidden "-fvisibility=hidden")
endif ()

set(CMAKE_C_FLAGS "${wall} ${hidden}")
set(CMAKE_CXX_FLAGS "${wall} ${hidden}")

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    message(STATUS "Debug")
    #    set(CMAKE_C_FLAGS "${debug} ${CMAKE_C_FLAGS}")
    #    set(CMAKE_CXX_FLAGS "${debug} ${CMAKE_CXX_FLAGS}")
    set(build_type debug)
elseif (CMAKE_BUILD_TYPE STREQUAL "Release")
    message(STATUS "Release")
    #    set(CMAKE_C_FLAGS "${o2} ${CMAKE_C_FLAGS}")
    #    set(CMAKE_CXX_FLAGS "${o2} ${CMAKE_CXX_FLAGS}")
    set(build_type release)
endif ()

set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_LIST_DIR}/lib/${xcl_lib_type}/${build_type})

message(STATUS "C FLAGS:${CMAKE_C_FLAGS}")
message(STATUS "CXX FLAGS:${CMAKE_CXX_FLAGS}")

set(xcl_inc_dir include/public include/internal)
set(xcl_lib_dir ${LIBRARY_OUTPUT_PATH})
include_directories(${xcl_inc_dir})
link_directories(${xcl_lib_dir})

set(lib_src_files)
set(exclude_dirs)

message(STATUS ${CMAKE_SYSTEM_NAME})

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    list(APPEND exclude_dirs macosx linux unix)
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    list(APPEND exclude_dirs windows linux)
elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    list(APPEND exclude_dirs windows macosx)
else ()
    message(FATAL_ERROR "unsupported platforms")
endif ()

function(collect_source_files source_dir)
    if (NOT IS_DIRECTORY ${source_dir})
        message(SEND_ERROR "not directory")
        return()
    endif ()
    get_filename_component(source_dir_name ${source_dir} NAME)
    set(accept true)
    foreach (exclude ${exclude_dirs})
        if (${exclude} STREQUAL ${source_dir_name})
            set(accept false)
            break()
        endif ()
    endforeach ()
    if (NOT ${accept})
        message(WARNING "ignore path ${source_dir}")
    else ()
        file(GLOB current_files ${source_dir}/*)
        foreach (path ${current_files})
            if (NOT IS_DIRECTORY ${path})
                list(APPEND lib_src_files ${path})
            else ()
                collect_source_files(${path})
            endif ()
        endforeach ()
        set(lib_src_files ${lib_src_files} PARENT_SCOPE)
    endif ()
endfunction()

collect_source_files(${CMAKE_CURRENT_LIST_DIR}/src)

foreach (source_file ${lib_src_files})
    message(STATUS ${source_file})
endforeach ()

if (compile_static_lib)
    message(STATUS "static")
    add_definitions(-DSTATIC)
    add_library(${xcl_lib_name} STATIC ${lib_src_files})
else ()
    message(STATUS "dynamic")
    add_definitions(-DDYNAMIC)
    add_library(${xcl_lib_name} SHARED ${lib_src_files})
endif ()

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    message(STATUS "windows")
    add_compile_definitions(_WIN32_WINNT=0x0A00)
    target_link_libraries(${xcl_lib_name} winmm)
else ()
    if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        message(STATUS "macos")
    elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
        message(STATUS "linux")
    endif ()
    target_link_libraries(${xcl_lib_name} pthread)
endif ()

add_custom_command(TARGET ${xcl_lib_name} PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}
        COMMAND ${CMAKE_COMMAND} -E echo "make library directories ${LIBRARY_OUTPUT_PATH}"
        VERBATIM)

if (BUILD_TEST)
    message(STATUS "building unit test")
    set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_LIST_DIR}/bin/${build_type})
    add_subdirectory(UnitTest)
    if (NOT compile_static_lib)
        add_custom_command(TARGET ${xcl_lib_name} PRE_BUILD
                COMMAND ${CMAKE_COMMAND} -E make_directory ${EXECUTABLE_OUTPUT_PATH}
                COMMAND ${CMAKE_COMMAND} -E echo "make binary directories ${EXECUTABLE_OUTPUT_PATH}"
                VERBATIM)
        add_custom_command(TARGET ${xcl_lib_name} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${xcl_lib_name}> ${EXECUTABLE_OUTPUT_PATH}
                COMMAND ${CMAKE_COMMAND} -E echo "copy $<TARGET_FILE:${xcl_lib_name}> to ${EXECUTABLE_OUTPUT_PATH}"
                VERBATIM)
    endif ()
endif ()
