cmake_minimum_required(VERSION 3.10)

project(xcl)

option(DEBUG "enable debug compile" ON)

if (DEBUG)
    message(STATUS "debug")
    set(CMAKE_BUILD_TYPE "Debug")
    set(CMAKE_C_FLAGS "-g -Wall")
    set(CMAKE_CXX_FLAGS "-g -Wall")
    set(CMAKE_DEBUG_POSTFIX "d")
else ()
    message(STATUS "release")
    set(CMAKE_BUILD_TYPE "Release")
endif ()

set(CMAKE_CXX_STANDARD 17)
set(COMPILE_STATIC true)
set(lib_src_files)

function(filter_files)
    if (WIN32)
        list(APPEND excludes unix linux ubuntu centos mac macos macosx)
    elseif (APPLE)
        list(APPEND excludes win32 win64 windows win linux ubuntu centos)
    elseif (UNIX)
        list(APPEND excludes win32 win64 windows win macos mac macosx)
    endif ()
    file(GLOB_RECURSE all_src_files src/*.c src/*.cc internal/src/*.c internal/src/*.cc)
    foreach (file_path ${all_src_files})
        set(accept true)
        foreach (exclude ${excludes})
            string(FIND ${file_path} ${exclude} index)
            if (NOT ${index} EQUAL -1)
                set(accept false)
                break()
            endif ()
        endforeach ()
        if (${accept})
            list(APPEND files ${file_path})
        endif ()
    endforeach ()
    set(lib_src_files ${files} PARENT_SCOPE)
endfunction()

filter_files()

if (WIN32)
    message(STATUS "win32")
    include_directories(include internal/inc "C:/Program Files (x86)/googletest-distribution/include")
    link_directories("C:/Program Files (x86)/googletest-distribution/lib")
else ()
    if (APPLE)
        message(STATUS "macos")
    elseif (UNIX)
        message(STATUS "unix")
    endif ()
    include_directories(include internal/inc /usr/local/googletest/include)
    link_directories(/usr/local/googletest/lib)
endif ()

if (COMPILE_STATIC)
    message(STATUS "STATIC")
    add_definitions(-DSTATIC)
    add_library(xcl STATIC ${lib_src_files})
else ()
    message(STATUS "DYNAMIC")
    add_definitions(-DDYNAMIC)
    add_library(xcl SHARED ${lib_src_files})
endif ()

file(GLOB_RECURSE test_files test/*.c test/*.cc)
add_executable(main main.cc ${test_files})
target_link_libraries(main xcl gtest gtest_main)